* Passenger
To restart passenger do
: touch tmp/restart.txt


* Bundler
** See local configuration options
: bundle config --local
** Get rid of gem installed by bundler
You have to get rid of all ones not required by the Gemfile
: bundle clean
: bundle clean --force 
will wipe even system gems

Otherwise you are supposed to do 
: bundle exec gem uninstall whatever
but this doesnt seem to work

** Execute multiple commands with =bundle exec=
** TODO speed up commands run with =bundle exec=
*** caching?
*** Just organising everything into a script/subshell to be run with bundle exec?
 - Might be hard to get back any results

* Rake
Show all tasks
: rake -T
or 
: rake -D


* Require arbitrary file in irb
If you are in an arbitrary directory and you want to require a module 
at a path relative to yourself of
: app/helpers/des_client_helper.rb
then the command from irb
: require './app/helpers/des_client_helper'

You gotta remember the 
: "./"
and leave off the
: ".rb"

* Routing
** member vs collection
http://stackoverflow.com/questions/3028653/difference-between-collection-route-and-member-route-in-ruby-on-rails
                URL                 Helper                      Description
----------------------------------------------------------------------------------------------------------------------------------
member          /photos/1/preview   preview_photo_path(photo)   Acts on a specific resource so required id (preview specific photo)
collection      /photos/search      search_photos_url           Acts on collection of resources(display all photos)

* Ruby/Rails & nil & iterating over it
** The Problem
Because Ruby uses blocks for iteration can cause problems when the class is nil.
Whereas in Python if one iterated over a collection that was nil
: for i in cool_guys
it would just terminate in Ruby
: cool_guys.each { |i| ... }
would throw an exception.
** Solutions
*** cool_guys && cool_guys.name()
*** cool_guys ? cool_guys.name() : nil
*** Using 'try'
Try is like send and can be called by itself, with args and/or blocks
**** cool_guys.try(:name)
**** cool_guys.try(:find, "hal")
**** cool_guys.try(:collect) {|g| g.name}


* Ruby Class/Metaclass/Object/Module Hierarchy
** Root Class
Before Ruby 1.9 it was 
: Object
After it is
: BasicObject

** Parent vs Superclass?
Superclass is  a Class instance method
: File.superclass
parent seems to be a module thing
Also parents and ancestors
* Running Shell commands from Ruby
Several methods
** %x(command)
: %x(command)
By default does not return stderr
Can run 
: %x(command 2>&1)
to append stderr to stout
** Open3 builtin module
** Open4 gem

* Commenting out Stuff in a Rails web template
Comments out both HTML and Ruby logic
#+BEGIN_SRC web
<%# if false %>
  ...old bit here
<% end %>
#+END_SRC web


* Roles
** To add an admin role
Find admin role in Roles table
: addy = Roles.where()
: User.find(1).roles << addy

* IRB
** Configuration
http://www.rubycentral.org/pickaxe/irb.html
http://tagaholic.me/2009/05/29/exploring-how-to-configure-irb.html
** Get configuration values from within IRB itself
enter
: conf
or
: irb_context
on the irb command line
** Set Prompt values
The normal Prompt (interactive) is nested in a number of hashes
: IRB.conf[:PROMPT][:DEFAULT][:PROMPT_I] = "bacon: "
The default prompt is =:DEFAULT=

** Getting access to BASH env variables
See [[file:Shell%20Scripting%20Magic.org::*Capture%20the%20output%20and%20then%20manipuate%20it%20in%20Ruby%20via%20IRB][Manipuating bash variables in Ruby via IRB]] for more details

But basically they will be available from the array ENV
: ENV['HOME']
Must be a string and not a symbol key
** Gems from irb
Use the Gem Module
e.g.
: Gem.path
*** Check if a gem is available in path
: Gem.available? "factory-girl"
or apparently new method:
: Gem::Specification.find_by_name "factory_girl"
*** Adding a gem from a non-standard location in irb
Add the path
: Gem.path << "/Users/Hal/code/hunome/hunomeGems/ruby/1.9.1/gems/"
Refresh gems knowledge
: Gem.refresh
then check new gems
: Gem.available? "factory_girl"
or apparently new method:
: Gem::Specification.find_by_name "factory_girl"
*** See which Gems are loaded/required
: Gem.loaded_specs
*** See which gem paths are available based on Gem.paths
: Gem.latest_load_paths
But you still may have to do a Gem.refresh to get some of them
*** All available Gems
: Gem::Specification.all_names
* Diagnostics & How to See Whats Going On
inspect?
: @object.inspect
** Check to see if a variable is defined
To check variable 'var'
: defined? var
** Rails
*** Print a message from a controller/view
#+BEGIN_SRC ruby
render :json => 'This is the string'
#+END_SRC ruby
*** Print a debug message to the log
: logger.(debug|info|warn|error|fatal)
e.g.
: logger.debug "Person attributes hash: #{@person.attributes.inspect}"
 Calling it as =Rails.logger= is also valid

*** Using the =ruby-debug= gem
**** Setup/installation
See this blog
http://chrisadams.me.uk/2009/04/28/how-to-set-up-a-debugger-with-mod_railspassenger/

Actually that might be outdated - the whole thing took ages but below instructions should be good for Rails 3 and Ruby 1.9

***** Installing the Gem
# Problems with Ruby 1.9. I couldnt do it in Bundler (didnt try =sudo bundler= though)had to do this:
# : sudo gem install ruby-debug19
put 
: gem 'debugger'
in your Gemfile

***** No configuration necesary if using a Rails server such as thin
When you want to invoke the debugger in the code just add to the line
: require 'debugger'; debugger
***** Otherwise
****** Other Configuration to be done once per app - applies to Apache/Passenger
******* Whack this in config/environments/development.rb
#+BEGIN_SRC ruby
  if File.exists?(File.join(Rails.root,'tmp', 'debug.txt'))
    Debugger.wait_connection = true
    Debugger.start_remote
    File.delete(File.join(Rails.root,'tmp', 'debug.txt'))
  end
#+END_SRC
can specify port and host if you like
#+BEGIN_SRC ruby
  remote_host = '127.0.0.1' 
  remote_port = 7000 
  if File.exists?(File.join(Rails.root,'tmp', 'debug.txt'))
    Debugger.wait_connection = true
    Debugger.start_remote(remote_host, remote_port)
    File.delete(File.join(Rails.root,'tmp', 'debug.txt'))
  end
#+END_SRC
******* Create a rake restart task
Heres what i have in a =lib/tasks/rails_debug.rake= file
#+BEGIN_SRC ruby
    desc "Restarts passenger if in debug mode"
    task :restart do
      system("touch tmp/restart.txt")
      system("touch tmp/debug.txt") if ENV["DEBUG"] == 'true'
    end
#+END_SRC
******* Create an rdebug.rc file
 - either in home directory or current directory
 - This may have been crucial - not sure
At any rate heres what i have in my ./rdebug.rc file
#+BEGIN_VERSE
set autolist
set autoeval
set autoreload
#+END_VERSE
****** Configuration to be done whenever you want to start the debugger
******* Call restart of passenger via rake task with DEBUG env variable set to true
: bundle exec rake restart DEBUG=true
******* THEN - VERY IMPORTANT - you must load a NEW page to get server to work
any page it doesnt matter
******* Open a remote debug session with
: bundle exec rdebug -c
or if port and host specified earlier
: bundle exec rdebug -c -p 7000 -h 127.0.0.1

*** Checking for the existance of a =params= key/value
: if params[:country_list].present?

* Modules and loading/accessing their innards
** See loaded modules
: Module.included_modules

For more:
http://www.ruby-doc.org/core-1.9.3/Module.htm
** See all modules and constants available from "Root"
: Module.constants
Can be used with submodules
: Devise::constants
*** An example of finding top level objects in a module after finding it with constants
: Module.constants.grep /Dev/
returns a couple of top level modules including "Devise"
: Devise::constants
or 
: Devise.constants
which can lead us down a chain of modues
: Devise::Controllers::Helpers::ClassMethods.constants
** Getting at an included module from IRB
use =const_get= 
 - ActiveSupport::Deprecation is a submodule
: ActiveSupport.const_get(:Deprecation).methods
** Defining a module vs acccessing it
To define a module the first time we need to decalre the full module bit
#+BEGIN_SRC ruby
module LRD
  module FormHelper
    def labeled_input(object_name, method, options = {})
      input = text_field(object_name, method, options)
      label = label(object_name, method, options)
      content_tag(:div, (label+input), { :class =&gt; 'labeled_input' }
    end
  end
end
#+END_SRC ruby

Whereas to access it you just need something like:

#+END_SRC ruby
module LRD::FormBuilder
  # ActionPack's metaprogramming would have done this for us, if FormHelper#labeled_input 
  # had been defined  at load.   Instead we define it ourselves here.
  def labeled_input(method, options = {})
    @template.labeled_input(@object_name, method, objectify_options(options))
  end
end
#+END_SRC ruby

** List all currently included modules
: Module.included_modules
** Can call a function from a module without including it/extending it with module_function
if you have 
#+BEGIN_SRC ruby
module UsefulThings
  def a()
    puts "aaay"
  end
  module_function :a
#+END_SRC
then from the command line you could call
: UsefulThings.a
However module_function must be placed after the function definition in the module
* Introspection - from the command line
** Check an objects methods minus inhereited stuff
obj.methods - Object.methods
** Look for specific methods
#+BEGIN_SRC ruby
=obj.methods.grep /to_/=
#+END_SRC ruby
or like above
#+BEGIN_SRC ruby
(UserProfile.find(3).knowtypes.methods - Object.methods).grep /create/ 
#+END_SRC ruby

Could even do some clever stuff like look for only methods that are not defined on parent:
#+BEGIN_SRC ruby
(obj_1.methods - obj_1.parent.methods).grep /create/ 
#+END_SRC ruby
or...
#+BEGIN_SRC ruby
#+END_SRC ruby
** Instance & Class Variables
obj.instance_variables
obj.class_variables

** Check which environment the rails console is being run in
: Rails.env
=> "development"

** List all objects in memory
This will be pretty big....
: ObjectSpace.each_object { |x| p x }
** List all currently included modules
: Module.included_modules
** List included modules in a specific module? Not sure
: (class << helper; self; end).send :included_modules
* Gem Commands
** Check which gems a gem depends on (i.e. it needs)
: gem dependency rails
** ALSO check which gems depend on this gem (i.e. which need it)
: gem dependency -R rails
** Install a gem
sudo gem install -r zzzzzz

** Install a gem with version
** Adding a source to the gem package source list
: gem  sources -a http://gems.github.com
** Uninstalling a gem and all dependencies
*** Shell Script - doesnt seem to recursively delete dependencies
Modified from:
for gem in `gem list --no-version`; do
  gem uninstall -aIx $gem
done

for gem in `gem dependency rails -v=3.2.1`; do
  gem uninstall -aIx $gem
done
*** Ruby Script from GitHub
https://github.com/mattdipasquale/gem_uninstall_r

** Searching for all version of rails gems on remote server
: gem search -ra "rails" | egrep "^rails "
** Install a particular gem version - DOES THIS HAVE PROBLEMS?
: sudo gem install -r rails -v=2.3.14
** Update the gem executable/rubygems
# New way
: sudo gem update --system
# OLD WAY, for historical purposes 
: sudo gem install rubygems-update --no-rdoc --no-ri
: sudo update_rubygems
** Info on whre gems are installed etc
From the command line
: gem env
or from irb
: Gem.path


* map command - block vs function syntax
Apparently these are equivalent
: Background.all.map(&:id)
and
: Background.all.map{ |bg| bg.id }
* Rails
** Console
*** Start the console in a particuar environment
: rails console development
or, allegedly:
: RAILS_ENV=test rails console
which should prob be:
: Rails.env=test rails console
*** Check which environment the rails console is being run in
: Rails.env
=> "development"
 - Dont seem to be able to change this properly by setting 
: Rails.env="production"
on the console command line

*** Get the path for a particular route
Evaluate:
: app.show_profile_path(1)
or
: app.show_profile_path(User.find(1))
or if you want the url
: app.show_profile_url(1)
or if you dont want the path for a particular record (assuming thats permissible for that route):
: app.show_profile_path()
*** Show which version of migration you are on
From console
: ActiveRecord::Migrator.current_version
:    (0.7ms)  SELECT `schema_migrations`.`version` FROM `schema_migrations` 
: => 20130120061135
This is the last migration file prefix we have done
*** Show how Rails will convert form Key/Value Pairs into a params hash
On the command line do this:
: Rack::Utils.parse_query "user[]=baby&user[]=non&name=fred&phone=0123456789"
*** Running my own scripts from a custom directory - easy way
: load('hal/scripts/' + Dir.entries('hal/scripts')[8])
Better way - get proper scripts
: Dir.entries('hal/scripts').select{|fn| not fn.include? "~"}
then 
: load('hal/scripts/' + Dir.entries('hal/scripts').select{|fn| not fn.include? "~"}[4])
** Sprockets
*** Located in
: app/assets/stylesheets/application.css/ 
and 
: app/assets/javascripts/application.js/
*** Comments
 - anything which is preceded with an = sign is included
 - otherwise its commented out
 - e.g. in the following
#+BEGIN_SRC css
/*
 *= require_self
 *= require foundation_and_overrides
 *= require_tree .
 * require jquery.ui.autocomplete
 */
#+END_SRC
the line 
:  * require jquery.ui.autocomplete
is "commented out". while
:  *= require_tree .
is not.

*** require and require_tree and paths to assets
When you use require_tree in a Manifest file such as 
: application.js
it will search for a path relative to the location of that manifest file.
**** Getting around awkward path requirements
That can be awkward if you have a filetree/path in another directory like 
: vendor/assets/javascripts/sigma
which would require the line
: //= require_tree ../../../vendor/assets/javascripts/sigma 

To get around this you can put a manifest file in
: vendor/assets/javascripts/sigma/manifest.js
which has the line
: //= require_directory .
and then in application.js you can get the whole thing with
: //= require sigma/manifest
** Migrations
*** See which migrations have been done and which haven't yet
: bundle exec rake db:migrate:status
*** Recreate Database from beginning of migrations
Sort of thing you might do after changing branches...
: bundle exec rake db:schema:load
May have to do db reset first
Can check which migrations have been done - 
: bundle exec rake db:migrate:status
If your database is effectively "ahead" of your migrations then you will see output like
#+BEGIN_VERSE
 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20130115094713  Create users
   up     20130115094727  Create sparks
   up     20130115094738  Create ignites
   up     20130115094815  Create connections
   up     20130115095012  Create interests
   up     20130115095054  Create countries
   up     20130115095641  Add devise to users
   up     20130116093555  Add demographic to user
   up     20130119050547  Add username to user
   up     20130120053352  Add spark fields
   up     20130120055047  Create knowtypes
   up     20130120060738  Acts as taggable on migration
   up     20130120061135  Alter spark
   up     20130121101800  ********** NO FILE **********
   up     20130121150741  ********** NO FILE **********
   up     20130121164811  ********** NO FILE **********
   up     20130121174637  ********** NO FILE **********
#+END_VERSE 
*** Actually i think this is best way to scrap and recreate database
: bundle exec rake db:migrate:drop
: bundle exec rake db:migrate:create
: bundle exec rake db:migrate:setup
*** Actually no just use reset
: bundle exec rake db:migrate:reset
*** Dont use 'type' as a column name
Its reserved

*** Dealing with Identical migrations in Different branches
e.g. both of you do a CreateUser migration in different branches and this gets pushed to the repo
1. Dont delete
2. Find out which order the two are run in by looking at the file prefix timestamp e.g.
: 20130121175043_create_user.rb
: 20130122546355_create_user.rb
1. rename the second one
: 20130122546355_alter_user.rb
2. edit the second one so that the Class name matches the filename
: class CreateUser < ActiveRecord::Migration
becomes
: class AlterUser < ActiveRecord::Migration
*The file name and class name must match*
1. Make sure that whatever happens inside (perhaps nothing) leaves the db in a state you want
2. Rebuild db
: bundle exec rake db:reset
: bundle exec rake db:migrate

*** Perform and undo specific migrations only
to do:
: bundle exec rake db:migrate:up VERSION=20130216040210
and to undo:
: bundle exec rake db:migrate:down VERSION=20130216040210
*** Rollback Migrations
Rollback two migrations
: rake db:rollback STEP=2
Rollback to a specific version
: rake db:migrate:down VERSION=20100905201547
The "VERSION" is important...
*** Recreating migrations for Test Database
If you do some migrations in dev and then you run rspec you are testing your "test" environment database
where the migrations have not been performed.
: bundle exec rake db:migrate RAILS_ENV=test
Actually this generally broke and didn't work - instead use
: bundle exec rake db:test:clone_structure
** Models & Associations
*** Set table of a model to an arbitrary name
#+BEGIN_SRC ruby
Class Countries < ActiveRecord::Base
  set_table_name "cc"
#+END_SRC 
    
** You can visit/find modules, classes and helpers by using tags
i.e. place cursor on the module/class name and press
: M-.
** Render Javascript from View/Controller
: render :js => "$('div#{my_id}').remove()"
** Rendering Partials with collections and local variable names
#+BEGIN_VERSE
When a partial is called with a pluralized collection, then the individual instances of the partial have access to the member of the collection being rendered via a variable named after the partial. In this case, the partial is _product, and within the _product partial, you can refer to product to get the instance that is being rendered.
#+END_VERSE
In Rails 3 you can also render a partial just by rendering a collection with the same name
: = render @products
will render the _product partial with the @products collection
* Ruby Meta/Magic Stuff
** You can call methods based on strings with the send method
: object.send("add_#{@type_of_fruit}", d)
Heres a more involved example
#+BEGIN_SRC ruby
      	["backgrounds","knowtypes","interests","languages","cities","countries"].each do |t|
          if params["user_profile_#{t}"].present? 
            params["user_profile_#{t}"].each do |d|
              @user_profile.send("add_#{t.singularize}", d)
            end
          end
      	end
#+END_SRC
*** If locally defined method (same class) then do like this
same for Rails associations
#+BEGIN_SRC ruby
class UserProfileInterest < ActiveRecord::Base
  def bat_kill()
    send("bat_karate")
  end
  def bat_karate()
  end
end
#+END_SRC

See here also [[*Rails%20converting%20strings%20to%20symbols%20etc][Rails converting strings to symbols etc]]

** Operating system commands
Strings enclosed with backquotes or =%x{}= are be considered by Ruby as operating system commands. Just try:
: puts (`calc`)
: puts ("Current directory content is: #{%x/dir/}")


* Heroku
** Transferring a PostGres Database to and from heroku
http://www.ryandaigle.com/a/pgtransfer-is-the-new-taps
First install pg transfer
: heroku plugins:install https://github.com/ddollar/heroku-pg-transfer
*** Yeah i dont know Heres what I had to do
First put the database on a publically accessible url
 - in this case inside the =public_html= directory on my Net Virtue server
   - I had to make the enclosing =Hunome= directory and the =dev2prod.sql= file both readable and executable by the world
then i could run 
: heroku pgbackups:restore DATABASE 'http://halhenke.net/Hunome/dev_2_prod.sql' --confirm hunome-dev
and this worked - needed =--confirm hunome-dev= to 'force' this change

Sort of like this:
https://devcenter.heroku.com/articles/heroku-postgres-import-export#import

* Rails converting strings to symbols etc
This module does it:
: ActiveSupport::CoreExtensions::String::Inflections
e.g.
: 'Book Author Title'.parameterize.underscore.to_sym
 - note - =.to_sym= is a Ruby string method
** String to Class
: "Object".constantize # => Object
Apparently for Ruby you use
: Module.const_get
but this doesnt handle nesting

* How to reset a users password from the command line in a Rails app using devise
Get the user
: user = User.where(:email => email).first
or whatever.

Then you need to set both =password= and =password_confirmation=
#+BEGIN_SRC ruby
if user
  user.password = new_password
  user.password_confirmation = new_password
  user.save
end
#+END_SRC ruby
To check do:
: irb(main):049:0> User.find(1).valid_password?('hunomerocks')
on the Rails console it returns "true"
* Requiring code
We require files - not modules or namespaces
i.e.
=require(''active_record/deprecation)=
Unlike say elisp where we require a tag that is provided in a loadpath by a =provide= statement


* Rspec
** It syntax
either
#+BEGIN_SRC ruby
it "string" do
 something.should ....
end
#+END_SRC
or 
: it { should ..... }
** Be careful of scope
Some stuff shoudl go in a 
: before
: after
: it
: let 
block and not just in the describe section.
Other stuff - such as including a module, should not go in these sections...
** Rspec Rails
*** Stubbing methods in views
The following both used when I had a spec trying to render a view that was trying to call  a method 
: real_user_is_admin?
from ApplicationController
either define the method in the spec e.g.
#+BEGIN_SRC ruby
def real_user_is_admin?
  false
end
#+END_SRC
or 
: view.stub(:real_user_is_admin? => true)
*** Stubbing current_contract
Would work in main view but not in partial if i used
: let (:current_contract) {jsa_contract}
I needed to do 
: before :each 
the method
: view.stub(:current_contract => jsa_contract)
*** Stub a partial view
To simplify the testing of  a complex page where you dont care what some partials return:
: stub_template "clients/_details.haml" => "%h1 Details"
** should & Matchers e.g. should_equal etc
should takes a matcher and a method
: - (Object) should(matcher = nil, message = nil)
Default matchers are things like
#+BEGIN_VERSE
should be
should be_true
should be_false
should be_nil
should be_arbitrary_predicate(*args)
should_not be_nil
should_not be_arbitrary_predicate(*args)
#+END_VERSE
*** Automagic predicate/boolean matchers
Rspec will also automagically create matchers for any predicates - e.g. boolean methods ending in ?
A Ruby predicate is a method that ends with a "?" and returns true or false. 
#+BEGIN_VERSE
empty?
nil? 
instance_of?
#+END_VERSE
All you need to do is write =should be_= followed by the predicate without the question mark, and RSpec will figure it out from there
*** Custom matchers
These can also be defined
** subject
Can be decalred explicitly
: subject { Person.new(:birthdate => 19.years.ago) }
if so it will be automatically be called on it e.g.
: it { should_be false}
else an implicit subject will call should on the thing you are describing
#+BEGIN_SRC ruby
describe Widget do
  it { should validate_presence_of(:name) }
end
#+END_SRC
is called on Widget
* FactoryGirl
** Can test from the console
Must be in test environment
: bundle exec rails c test
and then try something like
: FactoryGirl.create :des_contract_referral_detail
Or to specify some traits ('dms' and 'suspended')
: FactoryGirl.create(:des_contract_referral_detail, :dms, :suspended)
Create a user with some roles (definition uses :ignore and :after create)
: u1 = FactoryGirl.create(:user, :with_roles => "create_non_epf_purchase_claims_role_name")
** TopMost factory definition must match an existing model/table definition
e.g 
#+BEGIN_SRC ruby
FactoryGirl.define do
  
  factory :des_contract_referral_detail do
    association :client_on_des_contract
    ........
#+END_SRC
must be a model called
: DesContractReferralDetail
and cant write 
: des_contract_referral_details

** Be careful with associations
** Stub current_user
In before block
: view.stub(:current_user => user)
and then define user in your methods
: 
* Navigating directory tree from the console
Basically - the Dir module
pwd
: Dir.pwd
ls
: Dir.entries "app"
* How does Rake work
Call rake in a directory it will automatically call the Rakefile

** Example of hurricane app
In this case it then requires these files:
#+BEGIN_SRC ruby
require 'config/boot'
require 'rake'
require 'rake/testtask'
require 'rdoc/task'
require 'tasks/rails'
#+END_SRC ruby
This is where we get the deprecation warnings
 - config/boot checks whether rails is running i think

then this task throws an error if RAILS_ENV isnt defined....
#+BEGIN_SRC ruby
task :touch_file => :environment do                                                          
  if ENV.has_key?('RAILS_ENV')                                                               
    RAILS_ENV = ENV['RAILS_ENV']                                                             
  else                                                                                       
    puts 'FATAL rake delayed_job:touchfile: RAILS_ENV not set.'                              
    exit 1                                                                                   
  end                                                                                        
  # 'Hurricane::TouchFileJob' is defined in config/initializers.                             
  puts "mynbcs (rails):RAILS_ENV=#{RAILS_ENV}: Queuing delayed job to touch file."           
  Delayed::Job.enqueue(Hurricane::TouchFileJob.new)                                          
end 
#+END_SRC ruby
otherwise it
 - prints "mynbcs (rails):RAILS_ENV=#{RAILS_ENV}: Queuing delayed job to touch file."   
 - and using the Delayed plugin
 - it puts a Hurricane::TouchFileJob class into a queue...



* Converting vendor/plugins to Rails 3 and/or gems
This is pretty in depth:
http://bibwild.wordpress.com/2012/04/25/converting-a-more-complex-rails-2-3-style-plugin-to-non-deprecated-under-rails-3-2/

Basically a few ways to do this:
** Just move it to the =/lib= directory
 - If theres just some logic - i.e. a Ruby script - this is the best approach
 - if theres something that has to be done at the beginning add some code to =config/initializers= directory
** Rebuild the plugin as a gem
 - not as hard as it might otherwise be given that we can use =Bundle gem= to provide the structure of a gem
 - still could be pretty bad
 - have to move stuff around
   - init code
   - rake tasks
** Use bundler to just include the repository/code
 - Not 100% sure this works but it could be the easiest
 - Just dont have the version resolution of a gem
   - ...which we dont have anyway with a plugin
 - Make up a fake version number - should be fine
** Use Rails::Engine inheritance
 - Generate a fake gemspec and whack it in the plugin root directory
 - 

* Is it possible to tell which gems an app is *actually* using?
 - in short - no
http://stackoverflow.com/questions/9793360/figuring-out-which-gems-rails-app-does-not-use
 - could load each gem and grep for method usage
 - also grep for requires
*BUT*
 - ruby can dynamically generate methods, eval a string etc.
 - Makes it prety much a manual process unless your test coverage is awesome...

** rough algorithm
*** load gem in ruby environment
 - inspect 
   - i.e. gemName.methods.collect {}
 - grep the app for any use of the term
 - log the result
*OR*
*** grep the gem source
 - get all "def xxxxx"

Yeah this seems stupid - why parse stuff



* Code Snippets
** Overriding Existing Module/Class Definitions

The following was an attempt to override deprecation messages being generated:
#+BEGIN_SRC ruby
module ActiveSupport
    module Deprecation
        class << self
            def warn(message = nil, callstack = caller)
                puts "poo"
                #behavior.call(deprecation_message(callstack, message), callstack) if behavior && !silenced?
            end
        end
        module ClassMethods
            def deprecated_method_warning(method_name, message=nil)
                puts "blah"
            end
        end
    end
end
#+END_SRC ruby

didnt work because ActiveSupport::Dependency.load_paths was not being called

Instead load paths was being called from 
=Rails::Initializer.do |config|=
and so we had to overload this:
#+BEGIN_SRC ruby
module Rails
    class Configuration
        # Deprecated, use autoload_paths.
        def load_paths
            # $stderr.puts("config.load_paths is deprecated and removed in Rails 3, please use autoload_paths instead")
            puts "whoops 1"
            autoload_paths
        end
        
        # Deprecated, use autoload_paths=.
        def load_paths=(paths)
            # $#stderr.puts("config.load_paths= is deprecated and removed in Rails 3, please use autoload_paths= instead")
            puts "whoops 2"
            self.autoload_paths = paths
        end
    end
end
#+END_SRC ruby

** Rails Controller Stuff
*** redirect output to the index method from the same controller
#+BEGIN_SRC ruby
    redirect_to ({:action => "index"}) and return
#+END_SRC ruby
*** call the =set_user_profile= method every time before the create method
#+BEGIN_SRC ruby
  before_filter :set_user_profile, :only =>[:create]
#+END_SRC ruby
**  Rails Active Record stuff
*** Assigning via _id or not
Both these are viable ways to do this and might be equivalent:
#+BEGIN_SRC ruby
@user_profile_knowtype.user_profile_id = @user_profile.id
#+END_SRC ruby
#+BEGIN_SRC ruby
@user_profile_knowtype.user_profile = @user_profile
#+END_SRC ruby

** Queries from Console
*** Find field where string is not nil or non empty
: FormQuestion.where("hidden is not NULL").select{|fq| fq.hidden != ""}

* Weird Errors
** Gem install brings in lots of different stuff inexplicably - UNSOLVED
running:
#+BEGIN_SRC bash
sudo gem install rails -v=2.3.14
sudo gem install rake -v=0.9.0
#+END_SRC bash
rake 0.9.2.2 was suddenly installed on philemon
along with Rails 3.2.1




* Troubleshooting Rails - Specific errors & solutions
** If you get this:
: User(#70180561615400) expected, got ActiveSupport::HashWithIndifferentAccess(#70180531877120)
you may need
: accepts_nested_attributes_for :user
in your =UserProfile= declaration.
and in your form, make sure you have
#+BEGIN_SRC web
      <%= f.fields_for :user do |user| %>
#+END_SRC web
and not:
#+BEGIN_SRC web
      <%= f.fields_for @user_profile.user do |user| %>
#+END_SRC web
also may need =attr_accessible :user_attributes=

** "uninitialized constant HunomeDev" where HunomeDev is the /new name/ of our app
We changed from "Hunome" to "HunomeDev"

To get rid of this error I had to restart apache (restarting passenger was not sufficient)...

** Rails update forms mysteriously fail and =User.update_attributes(params[:user])= always return false
By putting error messages in my rails edit view/form and rendering edit on the 
failure of =update_attributes= I found that Rails was always reporting that the password was too short

In short the problem is the validation code is running when it shouldn't be.\\
This can be fixed by changing
#+BEGIN_SRC ruby
  validates :password,    :presence => { :on => :create },
              :length => { :minimum =>  6 }
#+END_SRC 
to:
#+BEGIN_SRC ruby
  validates :password,    :presence => { :on => :create },
              :length => { :minimum =>  6, :on => :create }
#+END_SRC 

* From Hunome - Rails Tips & Explanations
** Namespaces in Routes and forms
?
** Forms
 - We are creating an HTML form that will update/create/edit a specific instance of a Rais model
 - So we have to specify fields for different model attributes we wish to edit.
  
   We have 3 basic ways to build form helpers:
   1. =form_tag= - completely manual form construction
      - takes two args: path and options
      - can form a complete form with the help of these others
	- =label_tag=
	- =text_field_tag=
	- =submit_tag=
   2. something like =<% text_field(model, model_property) %>= which takes two args
      - first is a model instance that is being edited
      - second is an attribute of the model (doesnt have to be attribute though - just property type pair of methods)
   3. =form_for(:model_instance)=
      - yields a form builder
      - methods called on form builder to build the specific form
      - effectively a shorthand for method
   4. =fields_for()= is same as 3 except does not create outer HTML form tags
      - therefore can be used to add form fields for other models in the same form 


* How forms in Rails work
 - You call forms_for on a model *instance* i.e. on an *object - not a class*
 - If its blank Rails will then generate empty fields you can add stuff too
 - If not Rails will add existing info to the fields and you can edit it
 - After this Rails will store all this in =params[:yourobjectname]=
   - This is effectively a series of string key value pairs (HTML cannot do anything else) but Rails will format in such a way that it will read it as a hash/array/dictionary.
** sub_objects
 - These can also be edited in a form
 - Rails will pass them to the post method with the suffix attributes e.g. =params[:user][:user_profile_attributes]=
 - check out the name of this input field
#+BEGIN_SRC web
       <input class="faux-tag-checkbox inline" type="checkbox" name="user[user_profile_attributes][user_profile_languages_attributes][]" value="<%= lang.id %>" <%= @user_profile.id.present? ? (@user_profile.has_language?(lang.id) ? "checked=\"true\"" : "") : "" %> />
#+END_SRC
 - the name determines what the key will be in the post form - if you have a [] at the end of the name then the values will be placed in an array
 - If you have =accepts_nested_attributes_for user_profile= in your =user= model *and* =user_profile= =belongs_to= =user= then it should work
   - you may have to write a =user_profile_attributes=(attributes)= method in =user= yourself
** More on different methods of building Forms
 - We are creating an HTML form that will update/create/edit a specific instance of a Rais model
 - So we have to specify fields for different model attributes we wish to edit.
  
   We have 3 basic ways to build form helpers:
   1. =form_tag= - completely manual form construction
      - takes two args: path and options
      - can form a complete form with the help of these others
	- =label_tag=
	- =text_field_tag=
	- =submit_tag=
   2. something like =<% text_field(model, model_property) %>= which takes two args
      - first is a model instance that is being edited
      - second is an attribute of the model (doesnt have to be attribute though - just property type pair of methods)
   3. =form_for(:model_instance)=
      - yields a form builder
      - methods called on form builder to build the specific form
      - effectively a shorthand for method
   4. =fields_for()= is same as 3 except does not create outer HTML form tags
      - therefore can be used to add form fields for other models in the same form 



** How =form_for= and =fields_for= relate to specific FormHelper fields/emthods
The basic idea with =forms_for= is that it yields a FormHelper that works like this:
: <%= form_for :person do |f| %>
:   <%= f.text_field :first_name %>
gets expanded to:
: <%= text_field :person, :first_name %>
where =ActionView::Helpers::FormHelper= defines =text_field= as:
: text_field(object_name, method, options = {})
In turn, a FormHelper has the =fields_for= method that yields a FormBuilder.\\
A FormBuilder.checkbox seems to call a FormHelper.checkbox on the object that form_for is called on
#BEGIN_SRC ruby
def check_box(method, options = {}, checked_value = "1", unchecked_value = "0")
  @template.check_box(@object_name, method, objectify_options(options), checked_value, unchecked_value)
end
#END_SRC
i.e. with the code
: <%= form_for :person do |f| %>
=@object_name= is :person and =@template= is f
* Compiling stuff for Production Mode
: bundle exec rake assets:precompile
: git add public/assets
: git commit -m "vendor compiled assets"
** To put on heroku
If not on =master= branch
: git push heroku yourbranch:master --force


* TODO PROBLEMS
** How to log *anything* from configuration file
i.e. from development.rb or Hunome::Application.configure
** DONE How to get remote debugger to work for me
Why doesnt start_remote/start_server seem to get called?
My =./.rdebugrc= file was mispelled as =./.redbug.rc=

* TODO Cool Things
** TODO List/iterate over all models in the app from the console
Can sort of do this - bascially This would show all objects of class Contract in existence
: ObjectSpace.each_object(Contract).map{|ar| ar.class.name}
And i could show all Classes with
: ObjectSpace.each_object(Class).map{|ar| ar.class.name}
However - even though
: Contract.superclass.name
 => "ActiveRecord::Base"
: ObjectSpace.each_object(ActiveRecord::Base).map{|ar| ar.class.name}
gives me a bunch of stuff this maybe isnt quite what i wanted
 - i wanted to see which Classes the current environment has loaded
   - e.g. Helpers, Controllers, Models/ActiveRecords etc
But not necessarily which instances I have in non garbage collected memory 
 
** TODO Grep attribute_names of an ActiveRecord
More or less pipe 
: User.attribute_names
into grep
....I bloody did this already....cant remember how...
** TODO Bundle exec cache - quicker version of whatever bundle install does?
** TODO Awesome gem for rails console test?
* Rails Learning Resources
Code Academy
Rails 4 Zombies

* Gotchas
** =javascript_include_tag= and public/javascripts folder
Contrary to documentation, from 3.1 onwards c
: = javascript_include_tag "nested_form" 
will not look in 
: public/javascripts 
for the 
: nested_form.js
file. Instead it will look only in the asset pipeline path i.e.
: app/assets/javascripts
: lib/assets/javascripts
: vendor/assets/javascripts
(unless configured to do so)
** Rails Active Record Clone vs Dup
http://torontoprogrammer.ca/2012/06/spot-the-bug-rails-dup-vs-clone/
"So to summarize: if you want to make a quick copy of an ActiveRecord that’s in addition to the one that’s already in the table, use dup, not clone, as of Ruby on Rails 3.1.  And add tests and read release notes…"
