#+TITLE: Sublime Text

* Default Location of Configuration Files
** On OS X
: ~/Library/Application Support/Sublime Text 2/
** On Linux
: ~/.config/sublime-text-2/
* How to
** Show Commands/Bindings in the console
In the console enter
: sublime.log_commands(True)
or 
: sublime.log_input(True)
** Switch windows
: Sublime.windows()
: Sublime.active_window()
* Syntax Highlighting
Basically carried over from TextMate

Consists of a syntax file which creates/captures scopes based on regular expressions
and the theme files which can then be used to style these "scopes".
** Geting Setting Colours for a Syntax
This was actually pretty easy - I just whacked the following in the 
: Packages/Color Scheme - Default/Blackboard.tmTheme
file
#+BEGIN_SRC xml
<dict>
			<key>name</key>
			<string>diff.header</string>
			<key>scope</key>
			<string>meta.diff, meta.diff.header</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#75715E</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>diff.deleted</string>
			<key>scope</key>
			<string>markup.deleted</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#F92672</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>diff.inserted</string>
			<key>scope</key>
			<string>markup.inserted</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#A6E22E</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>diff.changed</string>
			<key>scope</key>
			<string>markup.changed</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#E6DB74</string>
			</dict>
		</dict>
<dict>
			<key>name</key>
			<string>diff.header</string>
			<key>scope</key>
			<string>meta.diff, meta.diff.header</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#75715E</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>diff.deleted</string>
			<key>scope</key>
			<string>markup.deleted</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#F92672</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>diff.inserted</string>
			<key>scope</key>
			<string>markup.inserted</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#A6E22E</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>diff.changed</string>
			<key>scope</key>
			<string>markup.changed</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#E6DB74</string>
			</dict>
		</dict>
#+END_SRC
** Getting/Setting Colours for diff
Basically the "scopes"/patterns i want to alter in appearance are called in the 
: Packages/Diff/Diff.tmLanguage file
file :
: markup.inserted.diff
and
: markup.deleted.diff
** Command for changing a files syntax
** To get a new Syntax to show up in the Syntax Menu/Command Palette
*** I thought you had to do this
Need to save a file in your 
: Packages/User
directory with the name corresponding to the name of the Syntax you want to define
: comicboards.sublime-settings
In this file you want to define any new file associations you may be using
#+BEGIN_SRC json
{
    "extensions":
    [
        "comic"
    ]
}
#+END_SRC
*** ...but i think it was just that
I hadnt set the name property of my Syntax Definition...
*** What the menu does
When you choose a different syntax from the menu this is called
: set_file_type {"syntax": "Packages/Text/Plain text.tmLanguage"}
*** Weird command i found
On the other hand
: Packages/RSpec/RSpecDetectFileType.py
has the command
#+BEGIN_SRC python
def set_syntax(view, syntax, path=None):
	if path is None:
		path = syntax
	view.settings().set('syntax', 'Packages/'+ path + '/' + syntax + '.tmLanguage')
	print("Switched syntax to: " + syntax)
#+END_SRC
*** Also
: view.set_syntax_file()
* Introspection
** Can use the SublimeREPL from the REPLPackage
*** Doesnt have the same environment as the proper sublime console
In standard console
: dir()
gives
: ['LogWriter', '__builtins__', '__doc__', '__name__', '__package__', 'signal', 'sublime', 'sublimelog', 'sys', 'thread', 'view', 'window']
whereas in SublimeREPL it gives
: ['__builtins__', '__name__']
*** Add some stuff back to the SublimeREPL
So load this
: import sublime
: import sublime_plugin
: from sublime import sublime.View as view
: from sublime import sublime.Window as window
** Get syntax scope from the console
: view.syntax_name(view.buffer_id())
* Some API style Documentation
http://docs.sublimetext.info/en/latest/reference/reference.html

http://www.sublimetext.com/docs/2/api_reference.html
* Troubleshooting/Bugs/Problems
** Binding Alt over Open NX from Macbook
For whatever reason 
: "alt+left" 
etc does not bind but
: "meta+left" 
does.
*HOWEVER* - when i do this it also binds all arrow keys
*** Whats Going On?
**** Based on the above I would guess that Meta is not being passed on as a real modifier key?
**** Based on looking at the console log
when 
: sublime.log_input(True)
is enabled I see that only "left" and "right" are being passed to Sublime when alt is pressed...




9:50 rit
10:45 cod

* xkb Alt and keymaps over Open NX
** Fiddling about
1198
modifier_map Mod2 { Alt_L };
modifier_map Mod2 { Alt_R };
changed to 
modifier_map Alt { Alt_L };
modifier_map Alt { Alt_R };
that dont work - can only use Mod2 etc
** Modifiers State in hexidecimal
*** At home
From xev I get
|---------+-------|
| Key     | State |
|---------+-------|
| Super   |  0x40 |
| Control |   0x4 |
| Alt     |  0x10 |
| Shift   |   0x1 |
|---------+-------|
*** At work
From xev I get
|---------+-------|
| Key     | State |
|---------+-------|
| Super   |  0x40 |
| Control |   0x4 |
| Alt     |   0x8 |
| Shift   |   0x1 |
|---------+-------|
** Setting Alt to Mod2 didnt work for some reason - changed it to Mod1 and everything seems good
e.g.
#+BEGIN_VERSE
modifier_map Mod1 { Alt_L };
modifier_map Mod1 { Alt_R };
#+END_VERSE
Also bindings set in gconf-editor now seem to work.
Perhaps there was something in xmodmap that I hadnt cleared or whatever that bound Alt to this modifier
After I have
|-----+-------|
| Key | State |
|-----+-------|
| Alt |  0x8  |
|-----+-------|
which basically matches what I had at work previously.....

* gconf-editor and keybindings
For some reason I cant seem to bind to certain keys
: <Alt>`
wont work but
: <Alt>a
will to cycle through windows of an application for example....
