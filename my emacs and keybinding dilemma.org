#+TITLE: Keyboard Settings & Keymappings in Linux & Emacs

To get to the meat of things:  [[*SO%20I%20FINALLY%20FIGURED%20IT%20OUT][I finally figured out how to set things up properly via xkb]]

* basic figuring out how things work in linux

 - xmodmaps maps keycodes (the actual output of the physical keyboard) to keysyms (logical/virtual names)
 - xkb is more complex and configurable...

** important files:
default keyboard...thing:
: /etc/default/keyboard
xorg global input settings:
: /etc/x11/xorg.conf
present in debian but not ubuntu?
: /etc/x11/xmodmap
lowlevel modifier key mask stuff:
: /usr/include/x11/x.h
available keysym names:
: /usr/include/x11/keysymdef.h

** important keyboard tools:
see the base linux mappings with:
: xmodmap
see the output of various keys with:
: xev
see the output of a single key by pressing control-v in a terminal:
also - 
graphical xmodmap configuration tool:
: xkeycaps
is called to modify the way terminal prcesses key inputs:
: loadkeys

** some web info
ftp://ftp.lyx.org/pub/sgml-tools/website/howto/keyboard-and-console-howto/t1659.html

* to get info about the current bindings/output
** from xmodmap
: xmodmap -pke > somefile
and then
: xmodmap -pm >> somefile

* xkb
https://wiki.archlinux.org/index.php/xkb
: xkbcomp $display somefile
and perhaps use with
: setxkbmap 
though this is for much more general configuration
** basic definitions
*** keycode
this is a key something like 
: 21
 for '='
*** state
this is a modifier something like 
: 0x1
for 'shift'
*** keysym
this is the combo of the other two symbols giving
: 0x2b
for '+'
and it is returned by 'xlookupstring'
** examples
e.g. '='
#+begin_verse
keypress event, serial 29, synthetic no, window 0xc00001,
    root 0xe2, subw 0x0, time 1494706335, (454,512), root:(474,554),
    state 0x0, keycode 32 (keysym 0x3d, equal), same_screen yes,
    xlookupstring gives 1 bytes: (3d) "="
    xmblookupstring gives 1 bytes: (3d) "="
    xfilterevent returns: false

keyrelease event, serial 29, synthetic no, window 0xc00001,
    root 0xe2, subw 0x0, time 1494706406, (454,512), root:(474,554),
    state 0x0, keycode 32 (keysym 0x3d, equal), same_screen yes,
    xlookupstring gives 1 bytes: (3d) "="
    xfilterevent returns: false
#+end_verse
and '+'
#+begin_verse
keypress event, serial 29, synthetic no, window 0xc00001,
    root 0xe2, subw 0x0, time 1494708782, (454,512), root:(474,554),
    state 0x1, keycode 32 (keysym 0x2b, plus), same_screen yes,
    xlookupstring gives 1 bytes: (2b) "+"
    xmblookupstring gives 1 bytes: (2b) "+"
    xfilterevent returns: false

keyrelease event, serial 29, synthetic no, window 0xc00001,
    root 0xe2, subw 0x0, time 1494708911, (454,512), root:(474,554),
    state 0x1, keycode 32 (keysym 0x2b, plus), same_screen yes,
    xlookupstring gives 1 bytes: (2b) "+"
    xfilterevent returns: false
#+end_verse
** xkb keycode translation - how does it all work. the gory details
xkb takes keycode, state and group to return keysym
: (keycode, group, state) → keysym
groups are "layouts" like 
: us-english
*** a bit more complex internally
xvkb has some more internal steps, summarised here:
#+begin_verse
   (keycode [, group]) → type
   (state, type) → level
   (keycode, group, level) → s[keycode][group][level]
#+end_verse
where
: s
is a translation table (xkb_symbols) and a
: type
is used to tell which modifiers affect which keys ("essentially it's a way to reduce the third dimension of s")
**** e.g.
a typical alphanumeric key is only affected by shift - it's type is set to two_level, and
: (state, two_level) → level = ((state >> 0) & 0x01) = state & 0x01
which is either 0 or 1. 
thus it's 
: s[keycode][0..4][0..1] 
or 
: s[normal key pressed]['us english'][shift pressed/not pressed]
instead of 
: s[keycode][0..4][0..256]

*** an xkb file layout by sections
**** xkb_keycodes
keycode definition. 
the rest of the file doesn't use numeric keycodes, only symbolic keylabels defined in this section.
the labels themselves are arbitrary. they are only used in xkb_symbols section later.
**** xkb_types
probably not worth mucking around with.

 - one_level keys are not affected by modifiers; e.g. it's enter, space, escape, f keys, shift/alt/ctrl keys and so on. 
 - two_level and alphabetic keys produce different keysyms depending on shift state. all alphanumeric keys are of these types. alphabetic additionally respects capslock.
***** syntax
: modifiers= shift+numlock+levelthree;
means keys of this type are affected by shift, numlock and levelthree bits only
: map[shift+levelthree]= level4;
define which combination corresponds to which level value.
**** xkb_compatibility
 - action definitions (interpret) and keyboard leds (indicator) among other things.
 - note that key+anyofornone(all) is equivalent to just key, but key is much easier to read.
**** xkb_symbols
the main section that defines what each key does. 
i.e. go from keylabel(keycode) to keysym
***** syntax
: key <labl> { [ g1l1, g1l2, g1l3, ... ], [ g2l1, g2l2, g2l3, ... ], ... }
where
 - <labl> is keylabel from xkb_keycodes section,
 - gilj is keysym for group i level j

key types are also specified here, either as
#+begin_verse
   key.type = "t1";
   key <...> { ... };
   key <...> { ... };
   key <...> { ... };
   key.type = "t2";
   key <...> { ... };
   key <...> { ... };
#+end_verse
or individually
: key <...> { type = "t", [ .... ], [ .... ] };

1. the number of keysyms in each group must match the number of levels defined for this type
2. for the list of possible keysyms check:
: /usr/include/x11/keysymdef.h 
**** xkb_geometry
completely irrelevant

*** changing modifier keys
**** real & virtual modifiers
real modifier bits are called shift, lock, control and mod1-mod5. 
there are no alt among them. 
virtual modifiers were introduced to allow saying something like
: #define alt mod1
it is possible to make a usable layout without defining virtual modifiers at all. 
among standard modifiers, only alt/meta actually need such treatment, because shift and control are real modifiers anyway and numlock is not normally used as a modifier.

real modifiers, m, are assigned to keys via:
: modifier_map m { <keysym> };
a virtual modifier, v, can be assigned to a key via:
: interpret <keysym> { virtualmod = v; };

if a virtual modifier v shares at least one keysym with a real modifier m, it is bound to m.

note that virtual modifier names are not pre-defined and must be declared in xkb_compatibility and xkb_types sections before using them:
#+begin_verse
 xkb_compatibility "complete" {
       virtual_modifiers levelthree,numlock,alt;
   }
#+end_verse

**** changing a single modifier key
you need a keysym and a matching "interpreter" entry in the relevant sections
#+begin_verse
   xkb_compatibility {
       interpret iso_level3_shift { action = setmods(modifiers=mod5); };
   }   
   xkb_symbols {
       key <lwin> { [iso_level3_shift ] };
   }
#+end_verse
**** changing multiple modifier keys
modifier map is a table that maps each of eight modifier bits to at most two keys:
: modifier_map mod1 { alt_l, alt_r };
*** some xkb commands/syntax
apparently you need the =interpret= and =modifier_map= commands to deal with state/modifier keys.
: indicator
this deals with led lights and capslock type state toggles
: interpret
: modifier_map
xkb_types
: type
: modifiers
: map
: level_name

*** how to find out which xkb group you are currently using
*** some basic keymap change examples...
*** how this connects to xmodmap and the keycodes given by xev
from xev we can tell
command key
: keycode 63 meta_l
: keycode 71 meta_r
alt key
: keycode 66 mode_switch
: keycode 69 mode_switch
in xkbcomp xkb_keycodes we have the mappings
#+begin_verse
   <kpmu> = 63;
    <caps> = 66;
    <fk03> = 69;
    <fk05> = 71;
#+end_verse
and in xkb_symbols "unknown we have
#+begin_verse
    key <kpmu> {         [          meta_l ] };
    key <caps> {         [     mode_switch ] };
    key <fk03> {         [     mode_switch ] };
    key <fk05> {         [          meta_r ] };
#+end_verse
and at the end we have this
#+begin_verse
    modifier_map mod2 { <kpmu> };
    modifier_map shift { <lalt> };
    modifier_map lock { <spce> };
    modifier_map mod1 { <caps> };
    modifier_map control { <fk01> };
    modifier_map shift { <fk02> };
    modifier_map mod1 { <fk03> };
    modifier_map control { <fk04> };
    modifier_map mod2 { <fk05> };
#+end_verse
so opt goes to mod1
and command goes to mod2?

**** escape key mapped to capslock (for vim)
#+begin_verse
key.type = "one_level";
key <caps> { [ escape ] };
#+end_verse
**** 
*** setting the xkbmap from a file
by default xkbcomp generates a source file
: xkbcomp $display keymap.xkb
calling on a source file should generate a compiled keymap file by default
: xkbcomp keymap.xkb
should generate
: keymap.xkm
to update a display you need to call it as the destination with a compiled keymap
: xkbcomp keymap.xkm $display
otherwise you can use setxkbmap in combination with xkbcomp:
: setxkbmap us -print | xkbcomp - $display
** how many times do you have to set it - per terminal?
seems to need to be set once per x-server.
so if you resume a session in open nx the xkb configuration will have reverted to default.
** launching emacs and xkb
if emacs is already launched and you change the xkb configuration then it wont work properly.
but if you relaunch then it should find the correct modifier bindings.

perhaps because emacs does not bind meta/super/ctrl to specific modifiers (mod1/mod2 etc) but 
looks at what is bound to the literal modifiers (mod1/mod2/mod3) at the time of launch 
e.g. (alt to mod3, super to mod 4) and decides which mod keys to bind. 

for the same reason when x-server returns to normal xkb configuration while emacs is still 
running it again doesnt seem to work properly - probably because it is bound to "real modifiers" 
that are now bound to different keys.

** whats the best set up? map command to super or meta?
   not sure. kde seemed to work with command mapped to meta
   also worked good with command mapped to super and alt mapped to meta when using over nx.
*** kde seems to start with
    - command mapped to <lwin> & <rwin>
    - alt mapped to <lalt> & <ralt>
    - setting up the aliases
#+begin_verse
    alias <algr> = <ralt>;
    alias <lmta> = <lwin>;
    alias <rmta> = <rwin>;
#+end_verse
    - setting
#+begin_verse
    key <lalt> {         [           alt_l,          meta_l ] };
    key <ralt> {
        type= "two_level",
        symbols[group1]= [           alt_r,          meta_r ]
    key <lwin> {         [         super_l ] };
    key <rwin> {         [         super_r ] };
#+end_verse
    and then mapping these virtual keys to the real modifier
#+begin_verse
    modifier_map mod1 { <lalt> };
    modifier_map mod1 { <ralt> };
    modifier_map mod1 { <meta> }
    modifier_map mod4 { <lwin> };
    modifier_map mod4 { <rwin> };
    modifier_map mod4 { <supr> };
#+end_verse

also
:     <caps> = 66;
:     key <caps> {         [       control_l,       control_l ] };
:     modifier_map control { <caps> };

** further problems
 - require look at
   - xkb_compatibility "complete"?
   - xkb_types "complete"?
*** Caps Lock mapped to Control_L

** When i logged in from home and then work again it seemed to change the behaviour of the Caps Lock key
** Now i dont need to set it when logging into Open NX at work?
Or did I set some shell script somewhere to automatically run
: do-new-work-xkb-setup
and i cant remember?

** Also - i accidentally logged into my "home session" from work and it seemed to change all the keybindings
 - My Alt keys became "Mode Switch" again
 - My Command Keys became Meta Keys

Basically went something like from this
#+BEGIN_VERSE
    key <KPMU> {         [          Super_L ] };
    key <LALT> {         [         Shift_L ] };
    key <SPCE> {         [       Caps_Lock ] };
    key <CAPS> {         [     Meta_L ] };
    key <FK01> {         [       Control_L ] };
    key <FK02> {         [         Shift_R ] };
    key <FK03> {         [     Meta_R ] };
    key <FK04> {         [       Control_R ] };
    key <FK05> {         [          Super_R ] };

    modifier_map Shift { <LALT> };
    modifier_map Lock { <SPCE> };
    modifier_map Control { Caps_Lock };
    modifier_map Control { <FK01> };
    modifier_map Shift { <FK02> };
    modifier_map Control { <FK04> };
    modifier_map Mod2 { Meta_L };
    modifier_map Mod2 { Meta_R };
    modifier_map Mod4 { Super_L };
    modifier_map Mod4 { Super_R };
#+END_VERSE
to: 
#+BEGIN_VERSE
    key <KPMU> {         [          Meta_L ] };
    key <LALT> {         [         Shift_L ] };
    key <SPCE> {         [       Caps_Lock ] };
    key <CAPS> {         [     Mode_switch ] };
    key <FK01> {         [       Control_L ] };
    key <FK02> {         [         Shift_R ] };
    key <FK03> {         [     Mode_switch ] };
    key <FK04> {         [       Control_R ] };
    key <FK05> {         [          Meta_R ] };

    modifier_map Mod2 { <KPMU> };
    modifier_map Shift { <LALT> };
    modifier_map Lock { <SPCE> };
    modifier_map Mod1 { <CAPS> };
    modifier_map Control { <FK01> };
    modifier_map Shift { <FK02> };
    modifier_map Mod1 { <FK03> };
    modifier_map Control { <FK04> };
    modifier_map Mod2 { <FK05> };
#+END_VERSE
*** I managed to fix it by running the "do-new-home-login-setup" script
** Getting a xkb map that seems to work as expected - possible solution?
My previously susccesful map did not generate bindings which worked - particularly for emacs Alt key

Therefore I created an experimental map in which i removed all Keycodes and Aliases that generated warnings when the map was called with
: xkbcomp exp-map.xkb
: xkbcomp exp-map.xkm $DISPLAY

This then worked - but perhaps the reason was not due to removing missing Keycodes but due to the fact that my .xkm files were being generated in the wrong directories e.g.
** My xkb setup scripts didnt seemt to be generating the output .xkm files 
i had to call 
: xkbcomp exp-map.xkb
directly to get the xkm file for the 
: xkbcomp exp-map.xkm $DISPLAY
command

The reason - The xkm file was being generated in the directory the script was being called from. Meaning i've been using old files for a long time....
:-\

** SO I FINALLY FIGURED IT OUT
*2 Step process - not sure how vital all steps are*
1. Get rid of all xkbcomp "compile time errors" by deleting unused keys and then unused aliases
   1. Not sure if this is a vital step.
2. Logout of NX & Log back in
   1. This is definitely vital
3. May have to restart any terminals also but from experience i doubt it....

* How Does This All fit Together?
http://forums.gentoo.org/viewtopic.php?t=51783
loadkeys is for the console (and cannot be used in X), xmodmap is for use in X, and xkb, which is loaded with command "xsetkbmap", is a newer method for for making changes in the keymap under X. 

Xkb comes with a set of predefined "rules" for changing the keyboard layout and is quite modular (i.e. you may defined your keymap using as many rules as you like, one after the other), so as long as you want to do something somebody has done before (e.g. use dvorak, turn off "Caps Lock" or swap the Ctrl and Caps Lock keys) it's easy. Redefining the keymap from ground up seems a bit more complex though (haven't tried this myself yet though). 

Xmodmaps are hardware-specific (i.e. if you change your [hardware] keyboard into something else, or use it on a different architecture, you may have to make changes for your xmodmap to work -- using xkb you would just change the rule specifying what keyboard hardware you got)If you want to produce an xmodmap, take a look at the program xkeycaps -- a graphical xmodmap editor which much simplifies making your own. 

The format of loadkeys and xmodmap files are similar, but they're *not* compatible (sigh!).


* In KDE:
khotkeys ?
: ~/.kde/share/config/kglobalshortcutsrc
: ~/.kde/share/config/khotkeysrc

* In different linux distros 
Debian - new:
: /etc/default/keyboard
Debian - old:
: /etc/console-tools/remap
Ubuntu - virtual consoles
: /etc/default/console-setup 


* PROBLEMS:
  In KDE, in Emacs the super key only works with some keys
** For some keys such as s-f it will say s-f is undefined despite it showing up in emacs keybindings
** For other keys such as s-up the input just wont register to emacs at all

Appears to be a bug in KDE:
https://bugs.kde.org/show_bug.cgi?id=157468



If you want to use it like in windows, to trigger the menu, go to 
: System -> Preferences -> Keyboard Shortcuts. 
Scroll down to and click on 'Show the panel's main menu'. Click on the right hand cell, which should change to 'New shortcut...' and press the Windows key.

EDIT: turns out this doesn't work but you can make it work by pressing Alt+F2 then entering

: gconftool-2 --set /apps/metacity/global_keybindings/panel_main_menu --type string "Super_L"
You can bind it to other things as well. You can use it as part of a key combination in for another shortcut or for an action in compiz. For example, I have my Windows key bound to the Initiate Window Resize action (because this is easier than trying to grab the sides of the window) which can be found in Compiz Config Settings Manager  under Window Management -> Resize Window.


*** Going to work around this wih a combo of xmodmap and EMACS:
**** The problem:
1. My Emacs commands are geared around an OS X configuration where Super key is used a lot
2. KDE sits between the xmodmap settings and breaks the use of the Super key as a modifier for SOME key combinations (Super key + arrow keys, s-f) but not others (s-c, s-o etc)
**** The solution:
xmodmap Super key to something else and then translate that to Super key locally in emacs, thus preserving all my existing emacs bindings...

**** The idea - more detail -
: xmodmap -e 'keycode 133 = F13'
Put F13 in the appropriate mod group
And then pick it up in Emacs by translating to super key (pseudocode follows)
: (translate-command-thing "F13" "s")
This SHOULD make emacs recognise all Super_L key combinations rather than just those that KDE doesnt eat and destroy for whatever fucked up reason.

**** Emacs key remapping functions:
: input-decode-map
"This variable holds a keymap that describes the character sequences sent by function keys on an ordinary character terminal. This keymap has the same structure as other keymaps, but is used differently: it specifies translations to make while reading key sequences, rather than bindings for key sequences."
 : local-function-key-map
"This variable holds a keymap similar to input-decode-map except that it describes key sequences which should be translated to alternative interpretations that are usually preferred. It applies after input-decode-map and before key-translation-map."
: key-translation-map
"This variable is another keymap used just like input-decode-map to translate input events into other events. It differs from input-decode-map in that it goes to work after local-function-key-map is finished rather than before; it receives the results of translation by local-function-key-map."

**** Results:
If I change Command from Super_L to f13 in xmodmap and then call
: (define-key key-translation-map  (kbd "<f13>") (kbd "<s-right>"))
Then pressing the Command key will call "s-right" and move to the end of the line
e.g. then i can call the exact command but i cant seem to set f13 as a prefix command....

**** Emacs cry for help:
I'm using kde on Ubuntu 12.04 and it seems to be "eating" the Windows/Super key before emacs can see it.

This sucks since i have a lot of commands bound to it.

It doesn't happen all the time e.g. "<Super-o>" works but "<Super-up>" doesnt.

This doesn't happen using the xfce or enlightenment window managers.

I've played around with xmodmap and looked at some xkb settings but no dice so far. I think it might be something in xkb or maybe something that kde does "after".

Does anyone have any ideas?

Hope this made sense to someone...



https://wiki.archlinux.org/index.php/Extra_Keyboard_Keys

1 Scancode - Produced by the Kernel in response to key press
2 KeyCode - Corresponds to a function
3 Symbol - The way xorg refers to keys

xmodmap: Keycode to KeySym?
xkdb: Alternate and more extended KeySyms in Symbols?
kde: Takes KeySyms/Symbols and eatc them?

xev: Gives KeyCodes and KeySyms
KeyCode  | KeySym
133		| Super_L

"Note: In 2.6 kernels raw mode, or scancode mode, is not very raw at all. Scan codes are first translated to key codes, and when scancodes are desired the key codes are translated back...there is no guarantee at all that the final result corresponds to what the keyboard hardware did send. To change behavior back to the old raw mode, add the parameter atkbd.softraw=0 to your kernel while booting. This can be removed for later boots when the old raw functionality is not required."

Map scancodes to keycodes
There are three ways of mapping scancodes to keycodes:
- Using udev
- Using the kernel tool setkeycodes

Extra Keyboard Keys in Console
https://wiki.archlinux.org/index.php/KEYMAP

Configuring the Console Keymap
Edit personal.map using your favorite editor. Examples:

* How-To
** Make the Right Alt key same as Left Alt key (Emacs)
change the line
: include "linux-with-alt-and-altgr" 
to 
: include "linux-with-two-alt-keys"
** Swap CapsLock with Escape (Vim)
make keycode 1 = Caps_Lock and keycode 58 = Escape
** Make CapsLock another Control key
  change the line 
: keycode 58 = Caps_Lock 
to 
: keycode 58 = Control
** Swap CapsLock with Left Control key
make keycode 29 = Caps_Lock and keycode 58 = Control


* These directives associate a keycode with a keysym
: dumpkeys
: loadkeys
: showkeys
* Using third-party programs
: keytouch
: actkbd
: xbindkeys
* I finally got the Super Key working in KDE
** kde - Maybe edit the following files while kde is not running
and maybe disable the "Start the Input Action Daemons on Login" option under
System Settings -> Custom Shortcuts -> 
: vim ~/.kde/share/config/khotkeysrc
: vim ~/.kde/share/config/kglobalshortcutsrc 
** WAIT - In KDE 
: Settings -> Input Device -> Keyboard -> Layout
If you tick 'Configure Layout' and press on the Shortcut area  and 
input the keys "Super" + "right Arrow" it shows fucking "Meta + Right"
and then says 
"The shortcut Meta + Right conflicts with the following key combination:
Shortcut 'Meta + Right' in Application KWin for action Move Right" !!!!!!!!

To the Batmobile!!!!!!!!!!!! 
** The solution
OK - 
: Settings -> Shortcuts & Gestures -> Global Keyboard Shortcuts
and THEN under 'KDE component' you can select different KDE things 
which have their own Keyboard Shortcuts - many of which are 'Meta' i.e. 'Super' o_o
Fingers crossed.....

AAAAAWWWWWWWWWWWWW   YEEEEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAHHHHHHHHHHH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 


* This is kinda interesting - X-Keys + contollerMate?

http://www.xkeys.com/xkeys.php
http://www.orderedbytes.com/controllermate/xkeys/
