#+TITLE: Javascript Tips Tricks & Troubleshooting

* Javascript can be incredibly fiddly and error sensitive
* Why things sometimes just don't work
** An earlier syntactical error means that there is a "silent failure"
Have to get everything right.
** Order of execution/script placement is very important
In the head of the document in the body etc. 
Sometimes things will suddenly work if you just change the order.

Some examples
*** I had a $('form').submission() method before the form
and it would never fire unti I placed it after the form.

Not sure why.
*** IN Rails the order you include scripts in the asset pipeline must be correct.

** Not creating an object properly
In Leaflet.js it said you could create a newobject with
#+BEGIN_SRC javascript
    myIcon = L.Icon({
	iconUrl: 'Hulk_Leap.png',
	iconSize: [102, 64]
    });
#+END_SRC
but this didnt work (it would not return a valid object reference) without a call to "new"
e.g. 
#+BEGIN_SRC javascript
    myIcon = new L.Icon({
	iconUrl: 'Hulk_Leap.png',
	iconSize: [102, 64]
    });
#+END_SRC
Curiously though
: L.marker()
did return a valid object 
*** Why Didnt this work
If I called 
: L.marker
from the command line I get
: function (t,e){return new n.Marker(t,e)}
whereas if I call L.Icon or L.DivIcon (which also doesn't work) I get
: function (){this.initialize&&this.initialize.apply(this,arguments),this._initHooks&&this.callInitHooks()}

The reason - I should have called *L.icon* instead of *L.Icon*
*** How were the two working/not working objects defined
**** L.marker
#+BEGIN_SRC javascript
L.marker = function (latlng, options) {
	return new L.Marker(latlng, options);
#+END_SRC
**** L.icon
#+BEGIN_SRC javascript
L.icon = function (options) {
	return new L.Icon(options);
#+END_SRC
* Skewer-Mode in Emacs
** Load it from el-get or elpa
Since the MELPA repository was down I added this to el-get-sources to install it:
#+BEGIN_SRC elisp
   (:name skewer-mode
	  :type git
	  :url "https://github.com/skeeto/skewer-mode"
	  :depends (emacs-http-server js2-mode)	;; :depends (simple-httpd js2-mode)
	  :features skewer-mode
	  )
   (:name emacs-http-server ;;This is subbing in for simple-httpd
	  :type git
	  :url "https://github.com/skeeto/emacs-http-server"
	  :features simple-httpd
    )
#+END_SRC
** You can then use it to evaluate javascript from any buffer in any browser tab
*** What you need to do to setup
 - Make sure the buffer is in js2-mode
: M-x js2-mode
 - If you want to run jscript in a new buffer then do the command
: M-x run-skewer
 - Otherwise if you want to have skewer-more interact with an arbitrary buffer then you will need to have the skewer script included in that page e.g.
:  <script src="http://localhost:8080/skewer"></script>
 - Turn on skewer-mode
: M-x skewer-mode 
 - To see if it works then try console.log() something and start a Developer console in that browser window
 - Otherwise you can eval stuff with 
: C-x C-e
*** To test if its not working
If when you do
: M-x list-skewer-clients
you get nothing you will have lost the connection
or if you do 
: skewer
in console and get nothing...
*** To reconnect
Not really sure how to do this without refreshing the browser window....
1. Refresh the browser window - you should see something in the client list when you call
: M-x list-skewer-clients
2. If still not working call 
: skewer()
from the browser console
* Console
** Look under Network/XHR to see pages/routes fetched by AJAX
You can also set breakpoints whenever a XHR request is made under 
Scripts/XHR Breakpoints and clicking the box
: Any XHR
* jQuery
** How to tell which events are bound to a particular element
I was told it was 
: $._data('#filters ul.filters:not(#purchase-filter,.history_filter) input.checkbox', "events")
but it was actually
: $('#filters ul.filters:not(#purchase-filter,.history_filter) input.checkbox').data("events")
or more specifically
: $('#filters ul.filters:not(#purchase-filter,.history_filter) input.checkbox').data("events")["click"]
*** More completely
#+BEGIN_SRC javascript
var click_events = $('a.update_supplier_status').data('events').click;
$.each(click_events, function(key, handlerObj) {
  console.log(handlerObj.handler);
});
#+END_SRC
But this just seems to return the javascript event handler - I want thte actual specific code from our application.....
http://stackoverflow.com/questions/570960/how-to-debug-javascript-jquery-event-bindings-with-firebug-or-similar-tool
