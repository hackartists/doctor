#+TITLE: Some tips & Commands to make Shell Scripting always Pretty Sweet
 - Also see [[file:linux%20mode%20help.org][Unix Help]] for other stuff
 - Also see [[file:Z-Shell.org][Z-Shell]] setup, tips and tricks

* Cool commands & Tricks
** How to add extension to all files in a folder in Unix/Linux
extension = .xml
 - Dont think this is recursive...is it?
: find . -type f -exec mv {} {}.xml ';'
** Find any file containing a specific piece of text in the path of the current directory
: find . -exec grep "findThisString" '{}' \; -print
** Copy a files contents to the clipboard
: pbcopy < ~/.ssh/id_rsa.pub

** Shortcut to run previous command
: !!
To do last command as sudo 
: sudo !!
** Shortcut for last used command argument
: !$
e.g.
: cd !$
** Count files in a directory
First column is the number of lines
: ls -l path | wc 
* Changing betwen emacs and vi mode
To go to vi mode
: set -o vi
* Understanding the syntax of man page descriptions of command arguments
From 
http://limpet.net/mbrubeck/2009/10/30/compleat.html
#+BEGIN_VERSE
The syntax should be familiar to long-time Unix users. Optional arguments are enclosed in square brackets; alternate choices are separated by vertical pipes. An ellipsis following an item means it may be repeated, and parentheses group several items into one. Words in angle brackets are parameters for the user to fill in.
#+END_VERSE
* Bash Completion
** list completion
list possible user completion
: C-x ~
list possible filename completion
: C-x / 
lists possible bash variable completion
: C-x $ 
list possible hostname completion
: C-x @
list possible command completion
: C-x ! 
** do completion
do filename completion
: Meta-/ 
do bash variable completion
: Meta-$ 
do hostname completion and
: Meta-@ 
do command completion
: Meta-! 
** How it works behind the scenes
   Uses the builtin commands =complete= and =compgen=
* Sudo/su etc
To become another user
: sudo su - username
To become another user for just one task
: sudo su - username -c "command_example arg_example"

* ps to show user id and group id
** ps with output specific to show UID, GID and args
 ps -eo uid,gid,args
** ps to show user and other stuff
ps -ef | grep apache
** User defined output
=To see every process with a user-defined format:=
          ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm
          ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm
          ps -eo pid,tt,user,fname,tmout,f,wchan
** List output Codes
ps L
** A good format - PID  TT   USER     GROUP    COMMAND  COMMAND UserName
: ps -eo pid,tt,user,group,fname,args,uname | grep pass
** The same with COLUMN TITLES
: ps -eo pid,tt,user,group,fname,args,uname | grep "emacs\|PID"
Obviously use something else if you dont expect PID to be in the title
* Is the following syntax possible to set and ENV variable and call a command?
: RAILS_ENV=development ruby management_scripts/tmp.rb
I think you want this?
: env RAILS_ENV=development ruby management_scripts/tmp.rb

** Actually - no i dont think so
See this: 
http://stackoverflow.com/questions/10938483/bash-specifying-environment-variables-for-echo-on-command-line

The reason why this works for suff like a script but not for something like 
: SOMEVAR=BBB echo zzz $SOMEVAR zzz
is because the parent shell evaluates $SOMEVAR on the command line before it invokes the command with the modified environment.

Consider:
# #+BEGIN_SRC bash
: echo "Hey" "man"
Hey man
: echo "Hey" $PWD
Hey /Users/Hal/code/hunome/hunome-dev
: echo "Hey" $poo
Hey
: poo=machine echo "Hey" $poo
Hey
: poo=machine echo "Hey" '$poo'
Hey $poo
: poo=machine echo "Hey" $'poo'

*** This however gives the desired behaviour - eval and single quotes
Hey poo
: poo=machine eval echo "Hey" '$poo'
Hey machine

*** Why? - same reason as sh -c works
Because it forces evaluation of $poo to be delayed so that it is evaluated in the context of the new shell\\
Similar to:
: poo=machine sh -c 'echo "Hey" $poo'
Hey machine


* Spaces in filenames
These are equivalent and work:
: touch ~/Documents/"A bad file"
: touch ~/Documents/A\ bad\ file

This doesnt surprisingly:
: touch "~/Documents/A bad file"
** In emacs
*However*
Trying to open a file in emacs called:
: ~/Documents/"A bad day for leisure"
Will create the file named
: "A bad day for leisure"

*Instead* open
: ~/Documents/A bad day for leisure
to get
: A bad day for leisure
** In scp - avoiding the =scp: ambiguous target= message
To copy to a path with spaces in it you need to both wrap the whole target path in quotes and use backslashes before the spaces.

Otherwise you will get the error message "scp: ambiguous target" error

e.g. This won't work:
: scp Supernatural.5x08.Changing\ Channels.HDTV.XviD-NoTV.avi  Noches@BigMac:/Volumes/My\ Book/BACK-UP/TV/ONGOING\ SERIES/Supernatural/Supernatural\ -\ Season\ 5/
Nor this:
: scp Supernatural.5x08.Changing\ Channels.HDTV.XviD-NoTV.avi  Noches@BigMac:"/Volumes/My Book/BACK-UP/TV/ONGOING SERIES/Supernatural/Supernatural - Season 5/"
But this will:
: scp Supernatural.5x08.Changing\ Channels.HDTV.XviD-NoTV.avi  Noches@BigMac:"/Volumes/My\ Book/BACK-UP/TV/ONGOING\ SERIES/Supernatural/Supernatural\ -\ Season\ 5/"
And apparently inside a shell script you need two backslashes:
: scp Supernatural.5x08.Changing\ Channels.HDTV.XviD-NoTV.avi  Noches@BigMac:"/Volumes/My\\ Book/BACK-UP/TV/ONGOING\\ SERIES/Supernatural/Supernatural\\ -\\ Season\\ 5/"
* Redirecting outputs
0 stdin
1 stdout
2 stderr

=From that perspective, the “>/dev/null 2>&1″ redirects the standard output to /dev/null to discard all standard output, and the 2 (standard error or any error message) is been redirected or treated as 1 (standard output), which means all error, warning or debug messages are also discarded or dropped. In other words, the cron job will execute without notification whatsoever, whether or not it’s completed successfully, has warning or failed. The & sign in front of 1 is standard syntax for file descriptor destination.=

*example*
#+BEGIN_SRC bash
hal@philemon:~/upgrade/rake_deprecate$ sudo ./rake_delayed_task 1>rake_output 2>rake_error
hal@philemon:~/upgrade/rake_deprecate$ ls
rake_delayed_task  rake_error  rake_output
hal@philemon:~/upgrade/rake_deprecate$ cat rake_error 
config.load_paths is deprecated and removed in Rails 3, please use autoload_paths instead
config.load_paths is deprecated and removed in Rails 3, please use autoload_paths instead
config.load_paths= is deprecated and removed in Rails 3, please use autoload_paths= instead
hal@philemon:~/upgrade/rake_deprecate$ cat rake_output 
mynbcs (rails):RAILS_ENV=production: Queuing delayed job to touch file.
#+END_SRC bash

* Capture the output of a function
Enclose the command in $() :
: echo $(defaults domains)
: echo $(ls -al)
Can then be captured in a variable
:  ALL_IN_THIS_DIR=$(ls -al)
** Capture the output and then manipuate it in Ruby via IRB
Firstly 
#+BEGIN_SRC bash
APPLE_DOMAINS=$(defaults domains)
export APPLE_DOMAINS
#+END_SRC
then start irb and the variable will be available via
: ENV['APPLE_DOMAINS']
e.g.
#+BEGIN_SRC ruby
ENV['APPLE_DOMAINS'].split(",")
#+END_SRC
* Execute commands in a subshell
: ( export RAILS_ENV=development; /usr/local/bin/rake --silent delayed_job:touch_file)
** as SUDO
The above subshell invocation doesnt terminate properly (an interactive shell is launched)
when that syntax is used.
Use this instead:
: sudo bash -c " export RAILS_ENV=production; cd /app/mynbcs/current/; /usr/local/bin/rake --silent delayed_job:touch_file "


* Read basic bash documentation in Emacs
Use Emacs Info mode
* See bash environment/system variables
either do
: env
or 
: set
* User Info
** Show who is logged in
: who
** Getting info on a users Group Membership
: groups Hal
is equiv to
: id -Gn Hal
or 
: id -p Hal
* Get the current time in "Epoch Time"
: date +%s
* Using *find*
** find all file whose name matches a string
: find . -name "secret_token"
** find all file whose name matches a regular expression
: find . -name "*.org"
** Find any file containing a specific piece of text in the path of the current directory
: find . -exec grep "findThisString" '{}' \; -print
* Grep
** Count how many times a word appears in each file
: grep -Rc "the-string" path/
and only print those files that are positive:
: grep -Rc "the-string" path/ | grep -v :0
** Get the total count of a certain string in a directory
: cat path/* | grep -c "the-string"
** print a linenumber
: grep -Rn "name" mod/forum/
* Weird Errors & Unexpected Things
** Sub-Shell fails weird/doesnt terminiate properly when run as sudo
*** PROBLEM
The following works just fine from the command line:
: ( export RAILS_ENV=development; /usr/local/bin/rake --silent delayed_job:touch_file)
i.e. The rake delayed_job:touch_file does not complain that RAILS_ENV is not set

HOWEVER...
ON philemon, the following does not work when called with sudo 
(it doesnt work without sudo either because we need sudo to access some logs on this server)

: ( RAILS_ENV=production ; sudo /usr/local/bin/rake --trace --silent delayed_job:touch_file )
: sudo -s "( export RAILS_ENV=production ; /usr/local/bin/rake --trace --silent delayed_job:touch_file )"
instead the subshell doesnt sem to terminate properly and we get logged into an interactive root shell
e.g.
#+BEGIN_SRC bash
hal@philemon:~/upgrade/rake_deprecate$ sudo -s "( export RAILS_ENV=production ; /usr/local/bin/rake --trace --silent delayed_job:touch_file )"
root@philemon:~/upgrade/rake_deprecate# 
#+END_SRC bash

*** SOLUTION
explicitly call a bash sbshell
: sudo bash -c "( export RAILS_ENV=production; cd /app/mynbcs/current/; /usr/local/bin/rake --silent delayed_job:touch_file )"
or just:
: sudo bash -c " export RAILS_ENV=production; cd /app/mynbcs/current/; /usr/local/bin/rake --silent delayed_job:touch_file "
*** FURTHER PROBLEM
This didn't work when called in a root owned directory
: sudo bash -c "git clone git+ssh://git.catalyst.net.nz/git/private/oua/saml.git -b idp idp"
Repeatedly prompted for password and then password of =root@git.catalyst.net.nz=!
#+BEGIN_VERSE
If you are using sudo with git commands (e.g. using sudo git clone because you are deploying to a root-owned folder), ensure that you also generated the key using sudo. Otherwise, you will have generated a key for your current user, but when you are doing sudo git, you are actually the root user – thus, the keys will not match.
#+END_VERSE

From Github
#+BEGIN_VERSE
Sudo or sudon't?

In almost all cases you should not be using the sudo command with git. If you have a very good reason you must use sudo, then ensure you are using it with every command (it's probably just better to use su to get a shell as root at that point). If you generate ssh keys without sudo, then when you try to use a command like sudo git push, you won't be using the ssh key you generated.
#+END_VERSE

* Command history
See [[http://www.gnu.org/software/bash/manual/bashref.html#Bash-History-Builtins][GNU bash documentation - external site]]
** see command history
: history
** Clear Command History
: history –c
** Disable History
: HISTSIZE=0
** Ignore commands that begin with a space
: HISTCONTROL=ignorespace
** Ignore duplicate commands
: HISTCONTROL=ignoredups
To also ignore spaces you need
: HISTCONTROL=ignoreboth
** Important variables
: HISTCONTROL=ignoredups
: HISTSIZE=10000
: HISTFILE
: HISTFILESIZE
A colon separated list of regexes of commands to ignore
: HISTIGNORE
** write/append to history file
The following could be set in a .bashlogout script
*** Write Current History list to history file
: history -w
*** Append Current History list to history file
: history -a

** If your history doesnt seem to be saved between sessions
Check the permissions on your $BASHHISTORYFILE \\
Mine were like this
: -rw-------  1 root  staff  653 24 Jan 00:55 .bash_history
So i did
: sudo chmod a+rw .bash_history 
To make it world read/writable.\\
Bad practice maybe but meh.
* TODO Shebang lines & the better use of them
Normally a shebang line does not undergo variable expansion.

Is this a problem if we want to execute something, say a shell, but have it possibly change?
e.g. 
: /bin/sh
might be linked to something else and we have no permisssion to change it

** Use /usr/bin/env?
** Wrapper script?
