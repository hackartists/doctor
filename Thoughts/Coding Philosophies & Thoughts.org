#+TITLE: Some of my Thoughts on Development, Coding etc

* Convention over Configuration
** Why?
 - So much easier when you are a maintainer/code reader
 - Much less need to debug/trace code over lots of different things
 - If you know one convention well you can be familiar with hunreds of projects that adhere to this convention
** See Debugging Rails vs Debugging Javascript
** Related Issues
[[*TIMTOWTDI%20vs%20There%20Should%20Be%20One%20&%20Only%20One%20Way%20To%20Do%20It][TIMTOWTDI vs There Should Be One & Only One Way To Do It]]

* TIMTOWTDI vs There Should Be One & Only One Way To Do It
 - Perl vs Python etc
 - Expressiveness at the cost of much higher cognitive load
** Still Syntactical Complexity can lead to greater terseness than is possible with a more simple language

* Classes vs Prototypes (& Modules)
Object are the basic modern, encapsulated datatypes
** Classes
 - Are sort of a description or a blueprint for an object
 - Factories for objects
 - What separates a class from an object?
*** Objects in Class Based Systems
 - Objects can only have variables
 - And a pointer to a table or object that stores methods
** Prototypes
 - More general than objects?
 - A prototype is an object that can have functions and variables
 - Maybe also have pointers to ancestors
*** Objects in Prototype Based Systems
 - We create new objects as copies of other objects
   - clone strategy
     - Deep or Shallow?
** Modules
 - Basic namespaces
 - can contain
* Namesapacing, Interfaces vs Inheritance
** Namespaces
 - Can prevent code from running into each other - dont have to worry about symbols with the same names, can also partition large code projects into different things
** Interfaces
 - 
** Inheritance
*** Advantages
 - Makes it easy to define reusable bits of code
*** Disadvantages
 - Hierarchies can become convoluted
   - Introduce acertain ammount of non-locality
 - We can
   - add methods
   - overide methods
   - but we probably cant remove them
 - What about
   - traits/tags/mixins?
* Code as Data
Means we can metaprogram easily

* UNIX - Everything is a stream
Ability to pipe things from one prohram from another
* Emacs - Everything is a buffer
 - Every window can be treated kind of the same
* Haskell - Everything is a function
 - input and output
* Ruby - Everything is an object
 - not quite true
* Python - Significant whitespace
** Advantages
 - Clean look means there is less room for errors to hide
** Disadvantages
 - Limits language expressiveness
   - Hard to sensibly nest and pass blocks of code that are only delimited by whitespace

* Macros
** Macros as compared to method missing
* Macros vs Functions
Lets consider what can and cant be refactored by macros and functions

A macro shoulf be able to refactor anything since ts equivalent to a compile time rewrite. Might be dependent on several expansions however.
** Linear functions
f(xy) = x f(y)

We could maybe write a macro that was equiv to some code such as
m(x,y,z) =
abba = x + z
f(y) z
Could we do the same with a function?
Depends.
Depends - maybe the scope is different e.g.
m(x,y,z)
kill(abba)
would make sense
but 
f(x,y,z)
kill(abba)
would not - "abba" would not be in scope.


* Comparing Different paradigms via Homomorphic Mathematical Analysis
* Interfaces
** Command Lines vs Menus
*** A bare command line is a terrible interface from a mnemonic perspective
*** A menu is a great interface from a mnemonic perspective
*** A command line is /potentially/ fast to navigate
**** A bare command line is not articularly fast to navigate
***** Need to touch type everyhing
**** With tab completion and command history it can easily be made very fast
*** A menu is not particularly fast to navigate and doesnt have much potential for improvement
